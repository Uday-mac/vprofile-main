---
- name: setting up the ec2 stack
  hosts: localhost
  connection: local 
  gather_facts: false

  tasks:
    - name: importing the vpc and bastion variables
      include_vars: vars/vpc_setup

    - name: importing the vpc id's
      include_vars: vars/output_vars

    - name: importing vprostack setup variables
      include_vars: vars/vprostacksetup

    - name: creating login-key
      amazon.aws.ec2_key:
        name: login-key
        region: "{{region}}"
      register: loginkeyout

    - name: saving the login-key
      copy:
       content: "{{loginkeyout.key.private_key}}"
       dest: ./login-key.pem
      when: loginkeyout.changed == true

    - name: security-group for elb
      amazon.aws.ec2_security_group:
        name: vprofile-elb-sg
        description: vprofile-elb-sg
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: elb_out

    - name: security-group for vprofile-stack
      amazon.aws.ec2_security_group:
        name: vprofile-stack-sg
        description: vprofile-stack-sg
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{elb_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionsgid}}"
      register: vpro_sg_out

    - name: security-group for elb
      amazon.aws.ec2_security_group:
        name: vprofile-stack-sg
        description: vprofile-stack-sg
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        rules:
          - proto: all
            group_id: "{{vpro_sg_out.group_id}}"

    - name: creating nginx instance
      amazon.aws.ec2_instance:
        name: "nginx-instance"
        key_name: "login-key"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        region: "{{region}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        vpc_subnet_id: "{{pirsub1_id}}"
        security_group: "{{vpro_sg_out.group_id}}"
        tags:
          Name: web01
      register: web01_out

    - name: creating tomcat instance
      amazon.aws.ec2_instance:
        name: "tomcat-instance"
        key_name: "login-key"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        region: "{{region}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        vpc_subnet_id: "{{pirsub1_id}}"
        security_group: "{{vpro_sg_out.group_id}}"
        tags:
          Name: app01
      register: app01_out

    - name: creating mysql instance
      amazon.aws.ec2_instance:
        name: "mysql-instance"
        key_name: "login-key"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        region: "{{region}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        vpc_subnet_id: "{{pirsub1_id}}"
        security_group: "{{vpro_sg_out.group_id}}"
        tags:
          Name: db01
      register: db01_out

    - name: creating memcached instance
      amazon.aws.ec2_instance:
        name: "memccache-instance"
        key_name: "login-key"
        instance_type: t2.micro
        image_id: "{{memcached_ami}}"
        region: "{{region}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        vpc_subnet_id: "{{pirsub1_id}}"
        security_group: "{{vpro_sg_out.group_id}}"
        tags:
          Name: mc01
      register: mc01_out

    - name: creating rabbitmq instance
      amazon.aws.ec2_instance:
        name: "rabbitmq-instance"
        key_name: "login-key"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        region: "{{region}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        vpc_subnet_id: "{{pirsub1_id}}"
        security_group: "{{vpro_sg_out.group_id}}"
        tags:
          Name: rmq01
      register: rmq01_out

    - name: printing the output
      debug:
        var: rmq01_out

    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        state: present
        region: "{{region}}"
        instance_ids:
          - "{{web01_out.instances[0].instance_id}}"
        security_group_ids: "{{elb_out.group_id}}"
        purge_instance_ids: true
        subnets:
          - "{{pubsub1_id}}"
          - "{{pubsub2_id}}"
          - "{{pubsub3_id}}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update private ip's in provision-stack/group_vars/hostsip
      ansible.builtin.blockinfile:
        path: vars/output_vars
        block: |
          web01_ip: "{{web01_out.instances[0].private_ip_address}}"
          app01_ip: "{{app01_out.instances[0].private_ip_address}}"
          db01_ip:  "{{db01_out.instances[0].private_ip_address}}"
          mc01_ip:  "{{mc01_out.instances[0].private_ip_address}}"
          rmq01_ip: "{{rmq01_out.instances[0].private_ip_address}}"

    - name: saving the login-key
      copy:
       content: "{{loginkeyout.key.private_key}}"
       dest: provision-stack/loginkey_vpro.pem
       mode: 0400

    - name: Insert/Update private ip's in provision-stack/group_vars/hostsip
      ansible.builtin.blockinfile:
        path: vars/output_vars
        block: |
          web01 ansible_host= "{{web01_out.instances.network_interfaces.private_ip_address}}"
          app01 ansible_host"{{app01_out.instances.network_interfaces.private_ip_address}}"
          db01 ansible_host= "{{db01_out.instances.network_interfaces.private_ip_address}}"
          mc01 ansible_host="{{mc01_out.instances.network_interfaces.private_ip_address}}"
          rmq01 ansible_host="{{rmq01_out.instances.network_interfaces.private_ip_address}}"
          cntrl ansible_host=127.0.0.1 ansible_connection=local

          [webservers]
          web01

          [appservers]
          app01

          [dbservers]
          db01

          [mcservers]
          mc01

          [rmqservers]
          rmq01

          [stack_inst:children]
          webservers
          appservers
          dbservers
          mcservers
          rmqservers

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
    
        
